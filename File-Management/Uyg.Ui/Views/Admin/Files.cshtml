@{
    ViewData["Title"] = "Dosyalar";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<!-- Dosya Yükleme Formu - Üst Kısım -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">Dosya Yükle</h4>
                    <a href="/StarredFiles" class="btn btn-outline-warning btn-sm">
                        <i class="fa fa-star me-1"></i>Favori Dosyalar
                    </a>
                </div>
            </div>
            <div class="card-body">
                <form class="row g-3" id="fileUploadForm">
                    <input type="hidden" id="txtId" />

                    <div class="col-md-3">
                        <label class="form-label">Dosya Seç</label>
                        <input type="file" class="form-control" id="fileInput" />
                    </div>

                    <div class="col-md-3">
                        <label class="form-label">Kategori</label>
                        <select class="form-control" id="ddlCategory">
                            <option value="">Kategori Seçiniz</option>
                        </select>
                    </div>

                    <div class="col-md-4">
                        <label class="form-label">Açıklama</label>
                        <input type="text" class="form-control" id="txtDescription" placeholder="Dosya açıklaması..." />
                    </div>

                    <div class="col-md-2">
                        <label class="form-label">&nbsp;</label>
                        <div class="d-flex gap-2">
                            <button type="button" class="btn btn-primary btn-sm" id="btnSave">
                                <i class="fa fa-upload"></i> Yükle
                            </button>
                            <button type="button" class="btn btn-secondary btn-sm" id="btnCancel" style="display:none;">
                                <i class="fa fa-times"></i> Vazgeç
                            </button>
                            <button type="button" class="btn btn-warning btn-sm" id="btnEdit" style="display:none;">
                                <i class="fa fa-edit"></i> Güncelle
                            </button>
                            <button type="button" class="btn btn-danger btn-sm" id="btnDelete" style="display:none;">
                                <i class="fa fa-trash"></i> Sil
                            </button>
                        </div>
                    </div>
                </form>

                <div class="alert mt-3" id="divResult" style="display:none;"></div>
            </div>
        </div>
    </div>
</div>

<!-- Dosya Listesi -->
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h3>Dosya Listesi</h3>
                    <span class="badge bg-primary" id="fileCount">0 dosya</span>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="tbFileList">
                        <thead class="table-dark">
                            <tr>
                                <th>Dosya Adı</th>
                                <th>Kategori</th>
                                <th>Boyut</th>
                                <th>Yükleyen</th>
                                <th>Yüklenme Tarihi</th>
                                <th>Paylaşım</th>
                                <th>İşlemler</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Paylaşım Modali -->
<div class="modal fade" id="shareModal" tabindex="-1" aria-labelledby="shareModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="shareModalLabel">Dosya Paylaşım</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <!-- Sol Taraf - Kullanıcı Listesi -->
                    <div class="col-md-6">
                        <h6>Kullanıcıları Seç</h6>
                        <div class="mb-3">
                            <input type="text" class="form-control" id="userSearchInput" placeholder="Kullanıcı ara...">
                        </div>
                        <div id="userList" style="max-height: 300px; overflow-y: auto;">
                            <!-- Kullanıcılar buraya dinamik olarak eklenecek -->
                        </div>
                    </div>

                    <!-- Sağ Taraf - Seçilen Kullanıcılar -->
                    <div class="col-md-6">
                        <h6>Seçilen Kullanıcılar</h6>
                        <div id="selectedUsers" style="max-height: 300px; overflow-y: auto;">
                            <!-- Seçilen kullanıcılar buraya eklenecek -->
                        </div>
                    </div>
                </div>

                <hr>

                <!-- Mevcut Paylaşımlar -->
                <div>
                    <h6>Mevcut Paylaşımlar</h6>
                    <div id="currentShares" style="max-height: 200px; overflow-y: auto;">
                        <!-- Mevcut paylaşımlar buraya eklenecek -->
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-danger" id="btnUnshareAll">Tüm Paylaşımları Kaldır</button>
                <button type="button" class="btn btn-primary" id="btnShare">Paylaş</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function(){
            console.log("Sayfa yüklendi, başlatılıyor...");

            var apiBaseUrl="@ViewBag.ApiBaseURL";
            console.log("API Base URL:", apiBaseUrl);

            if(localStorage.getItem("token")=="" || localStorage.getItem("token")==null){
                console.log("Token bulunamadı, login'e yönlendiriliyor");
                location.href="/Login";
                return false;
            }
            var token=localStorage.getItem("token");
            console.log("Token bulundu, uzunluk:", token.length);

            // Token'dan kullanıcı rollerini çıkar
            var userRoles = getUserRoles();
            console.log("Kullanıcı rolleri:", userRoles);

            // Global değişkenler
            var currentFileId = null;
            var allUsers = [];
            var selectedUserIds = [];

            console.log("API çağrıları başlatılıyor...");
            GetFileList();
            GetCategoryList();
            GetAllUsers(); // Kullanıcı listesini al

            // Token'dan kullanıcı ID'sini çıkarma fonksiyonu
            function getUserId() {
                try {
                    var base64Url = token.split('.')[1];
                    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
                        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                    }).join(''));

                    var payload = JSON.parse(jsonPayload);
                    return payload["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"] ||
                           payload["sub"] ||
                           payload["nameid"];
                } catch(e) {
                    console.log("User ID decode hatası:", e);
                    return null;
                }
            }

            // Token'dan kullanıcı rollerini çıkarma fonksiyonu
            function getUserRoles() {
                try {
                    var base64Url = token.split('.')[1];
                    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
                        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                    }).join(''));

                    var payload = JSON.parse(jsonPayload);
                    var roles = payload["http://schemas.microsoft.com/ws/2008/06/identity/claims/role"] || [];

                    // Eğer tek rol varsa array'e çevir
                    return Array.isArray(roles) ? roles : [roles];
                } catch(e) {
                    console.log("Token decode hatası:", e);
                    return [];
                }
            }

            // Tüm kullanıcıları getir
            function GetAllUsers() {
                $.ajax({
                    url: apiBaseUrl + "/User",
                    type: "GET",
                    headers: {
                        "Authorization": "Bearer " + token
                    },
                    success: function (data) {
                        allUsers = data;
                        console.log("Kullanıcılar yüklendi:", allUsers.length);
                    },
                    error: function (xhr, status, error) {
                        console.log("Kullanıcı listesi alınamadı, mock data kullanılıyor:", error);
                        // User API yoksa mock data kullan
                        allUsers = [
                            {id: "user-1", userName: "ahmet.yilmaz", email: "ahmet@example.com"},
                            {id: "user-2", userName: "ayse.demir", email: "ayse@example.com"},
                            {id: "user-3", userName: "mehmet.kaya", email: "mehmet@example.com"},
                            {id: "user-4", userName: "fatma.ozkan", email: "fatma@example.com"},
                            {id: "user-5", userName: "ali.celik", email: "ali@example.com"}
                        ];
                        console.log("Mock kullanıcılar yüklendi:", allUsers.length);
                    }
                });
            }

            function GetFileList(){
                console.log("GetFileList çağrıldı");
                console.log("API URL:", apiBaseUrl + "/FileModal");
                console.log("Token:", token ? "Var" : "Yok");

                $.ajax({
                    url: apiBaseUrl + "/FileModal",
                    type: "GET",
                    headers: {
                        "Authorization": "Bearer " + token
                    },
                    success: function (d) {
                        console.log("Dosya listesi başarıyla alındı:", d);
                        console.log("Dosya sayısı:", d ? d.length : 0);
                        FileToTable(d);
                    },
                    error: function (xhr, status, error) {
                        console.log("Dosya listesi HATASI:");
                        console.log("Status:", status);
                        console.log("Error:", error);
                        console.log("Response:", xhr.responseText);
                        console.log("Status Code:", xhr.status);

                        showMessage("Dosya listesi alınamadı: " + error, "danger");
                    }
                });
            }

            function GetCategoryList(){
                console.log("GetCategoryList çağrıldı");
                console.log("Category API URL:", apiBaseUrl + "/Category");

                $.ajax({
                    url: apiBaseUrl + "/Category",
                    type: "GET",
                    headers: {
                        "Authorization": "Bearer " + token
                    },
                    success: function (d) {
                        console.log("Kategori listesi başarıyla alındı:", d);
                        CategoryToDropdown(d);
                    },
                    error: function (xhr, status, error) {
                        console.log("Kategori listesi HATASI:");
                        console.log("Status:", status);
                        console.log("Error:", error);
                        console.log("Response:", xhr.responseText);
                        console.log("Status Code:", xhr.status);

                        showMessage("Kategori listesi alınamadı: " + error, "warning");
                    }
                });
            }

            function CategoryToDropdown(data){
                $("#ddlCategory").empty().append('<option value="">Kategori Seçiniz</option>');
                $.each(data,function(i,item){
                    if(item.isActive){
                        $("#ddlCategory").append('<option value="'+item.id+'">'+item.name+'</option>');
                    }
                });
            }

            function FileToTable(data){
                console.log("FileToTable çağrıldı, data:", data);

                if (!data || data.length === 0) {
                    console.log("Veri yok veya boş array");
                    $("#tbFileList tbody").html('<tr><td colspan="7" class="text-center">Henüz dosya yüklenmemiş</td></tr>');
                    $("#fileCount").text("0 dosya");
                    return;
                }

                $("#tbFileList tbody").empty();
                var row="";
                var currentUserId = getUserId();

                $.each(data,function(i,item){
                    console.log("Dosya işleniyor:", item);
                    var fileSize = formatFileSize(item.fileSize || 0);
                    var categoryName = item.category ? item.category.name : "Kategori Yok";
                    var isOwner = item.userId === currentUserId;
                    var isShared = item.userId !== currentUserId; // Başkasının dosyası ise paylaşılan dosya

                    row+="<tr>";
                    row+="<td>";
                    if (isShared) {
                        row+="<i class='fa fa-share-alt text-info me-2' title='Paylaşılan Dosya'></i>";
                    } else {
                        row+="<i class='fa fa-file me-2'></i>";
                    }
                    row+=item.fileName+item.extension+"</td>";
                    row+="<td><span class='badge bg-secondary'>"+categoryName+"</span></td>";
                    row+="<td>"+fileSize+"</td>";
                    row+="<td>"+item.uploadedBy+"</td>";
                    row+="<td>"+FormatDate(item.uploadOn)+"</td>";

                    // Paylaşım durumu kolonu
                    row+="<td>";
                    if (isOwner) {
                        row+="<span class='badge bg-success'>Sahip</span>";
                    } else if (isShared) {
                        row+="<span class='badge bg-info'>Paylaşılan</span>";
                    }
                    row+="</td>";

                    // İşlemler kolonu
                    row+='<td>';
                    row+='<div class="btn-group" role="group">';
                    row+='<button class="btn btn-success btn-sm btnDownload" data-id="'+item.id+'" title="İndir"><i class="fa fa-download"></i></button>';

                    // Sadece dosya sahibi düzenleme, silme ve paylaşım yapabilir
                    if (isOwner) {
                        row+='<button class="btn btn-warning btn-sm btnEdit" data-id="'+item.id+'" title="Düzenle"><i class="fa fa-edit"></i></button>';
                        row+='<button class="btn btn-info btn-sm btnShare" data-id="'+item.id+'" title="Paylaş"><i class="fa fa-share"></i></button>';
                        row+='<button class="btn btn-danger btn-sm btnDeleteFile" data-id="'+item.id+'" title="Sil"><i class="fa fa-trash"></i></button>';
                    }

                    row+='<button class="btn btn-outline-warning btn-sm btnStar" data-id="'+item.id+'" title="Favorilere Ekle/Çıkar"><i class="fa fa-star"></i></button>';
                    row+='</div>';
                    row+='</td>';
                    row+="</tr>";
                });
                $("#tbFileList tbody").append(row);
                $("#fileCount").text(data.length + " dosya");
                console.log("Tablo güncellendi, " + data.length + " dosya eklendi");
            }

            // Paylaşım butonuna tıklama
            $(document).on("click", ".btnShare", function(){
                currentFileId = $(this).attr("data-id");
                openShareModal(currentFileId);
            });

            // Paylaşım modalını aç
            function openShareModal(fileId) {
                currentFileId = fileId;
                selectedUserIds = [];

                // Modal içeriğini temizle
                $("#userList").empty();
                $("#selectedUsers").empty();
                $("#currentShares").empty();
                $("#userSearchInput").val("");

                // Kullanıcı listesini doldur
                populateUserList();

                // Mevcut paylaşımları getir
                getCurrentShares(fileId);

                // Modali aç
                $("#shareModal").modal("show");
            }

            // Kullanıcı listesini doldur
            function populateUserList(searchTerm = "") {
                var currentUserId = getUserId();
                var filteredUsers = allUsers.filter(user =>
                    user.id !== currentUserId && // Kendisini hariç tut
                    (searchTerm === "" ||
                     user.userName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                     user.email.toLowerCase().includes(searchTerm.toLowerCase()))
                );

                var userHtml = "";
                filteredUsers.forEach(function(user) {
                    var isSelected = selectedUserIds.includes(user.id);
                    userHtml += '<div class="form-check p-2 border rounded mb-2">';
                    userHtml += '<input class="form-check-input user-checkbox" type="checkbox" value="' + user.id + '"' + (isSelected ? ' checked' : '') + '>';
                    userHtml += '<label class="form-check-label ms-2">';
                    userHtml += '<strong>' + user.userName + '</strong><br>';
                    userHtml += '<small class="text-muted">' + user.email + '</small>';
                    userHtml += '</label>';
                    userHtml += '</div>';
                });

                $("#userList").html(userHtml);
            }

            // Kullanıcı arama
            $("#userSearchInput").on("input", function() {
                var searchTerm = $(this).val();
                populateUserList(searchTerm);
            });

            // Kullanıcı seçimi değişikliği
            $(document).on("change", ".user-checkbox", function() {
                var userId = $(this).val();
                if ($(this).is(":checked")) {
                    if (!selectedUserIds.includes(userId)) {
                        selectedUserIds.push(userId);
                    }
                } else {
                    selectedUserIds = selectedUserIds.filter(id => id !== userId);
                }
                updateSelectedUsersDisplay();
            });

            // Seçilen kullanıcıları göster
            function updateSelectedUsersDisplay() {
                var selectedHtml = "";
                selectedUserIds.forEach(function(userId) {
                    var user = allUsers.find(u => u.id === userId);
                    if (user) {
                        selectedHtml += '<div class="d-flex justify-content-between align-items-center p-2 border rounded mb-2">';
                        selectedHtml += '<div>';
                        selectedHtml += '<strong>' + user.userName + '</strong><br>';
                        selectedHtml += '<small class="text-muted">' + user.email + '</small>';
                        selectedHtml += '</div>';
                        selectedHtml += '<button class="btn btn-sm btn-outline-danger remove-user" data-user-id="' + userId + '">';
                        selectedHtml += '<i class="fa fa-times"></i>';
                        selectedHtml += '</button>';
                        selectedHtml += '</div>';
                    }
                });
                $("#selectedUsers").html(selectedHtml);
            }

            // Seçilen kullanıcıyı kaldır
            $(document).on("click", ".remove-user", function() {
                var userId = $(this).attr("data-user-id");
                selectedUserIds = selectedUserIds.filter(id => id !== userId);
                updateSelectedUsersDisplay();
                populateUserList($("#userSearchInput").val()); // Checkbox'ları güncelle
            });

            // Mevcut paylaşımları getir
            function getCurrentShares(fileId) {
                $("#currentShares").html('<p class="text-muted">Mevcut paylaşımlar yükleniyor...</p>');

                // Gerçek API çağrısı
                $.ajax({
                    url: apiBaseUrl + "/FileModal/" + fileId + "/shares",
                    type: "GET",
                    headers: {
                        "Authorization": "Bearer " + token
                    },
                    success: function(shares) {
                        console.log("Mevcut paylaşımlar:", shares);
                        displayCurrentShares(shares);
                    },
                    error: function(xhr, status, error) {
                        console.log("Paylaşım listesi alınamadı:", error);
                        if (xhr.status === 404) {
                            // Endpoint henüz yoksa mock data kullan
                            displayCurrentShares([]);
                        } else {
                            displayCurrentShares([]);
                        }
                    }
                });
            }

            // Mevcut paylaşımları göster
            function displayCurrentShares(shares) {
                if (shares.length === 0) {
                    $("#currentShares").html('<p class="text-muted">Henüz kimseyle paylaşılmamış</p>');
                    return;
                }

                var sharesHtml = "";
                shares.forEach(function(share) {
                    sharesHtml += '<div class="d-flex justify-content-between align-items-center p-2 border rounded mb-2">';
                    sharesHtml += '<div>';
                    sharesHtml += '<strong>' + share.userName + '</strong><br>';
                    sharesHtml += '<small class="text-muted">Paylaşıldı: ' + FormatDate(share.sharedOn) + '</small>';
                    sharesHtml += '</div>';
                    sharesHtml += '<button class="btn btn-sm btn-outline-danger unshare-user" data-user-id="' + share.userId + '">';
                    sharesHtml += '<i class="fa fa-times"></i> Kaldır';
                    sharesHtml += '</button>';
                    sharesHtml += '</div>';
                });
                $("#currentShares").html(sharesHtml);
            }

            // Tekli paylaşımı kaldır
            $(document).on("click", ".unshare-user", function() {
                var userId = $(this).attr("data-user-id");
                if (confirm("Bu kullanıcıyla paylaşımı kaldırmak istediğinizden emin misiniz?")) {
                    unshareFile([userId]);
                }
            });

            // Dosya paylaşma
            $("#btnShare").click(function() {
                if (selectedUserIds.length === 0) {
                    showMessage("Lütfen en az bir kullanıcı seçin", "warning");
                    return;
                }

                var shareData = {
                    fileId: parseInt(currentFileId),
                    userIds: selectedUserIds
                };

                console.log("Paylaşım verisi gönderiliyor:", shareData);
                console.log("API URL:", apiBaseUrl + "/FileModal/share");

                $.ajax({
                    url: apiBaseUrl + "/FileModal/share",
                    type: "POST",
                    headers: {
                        "Authorization": "Bearer " + token,
                        "Content-Type": "application/json"
                    },
                    data: JSON.stringify(shareData),
                    success: function(response) {
                        console.log("Paylaşım başarılı:", response);
                        showMessage("Dosya başarıyla paylaşıldı", "success");
                        $("#shareModal").modal("hide");
                        GetFileList(); // Listeyi yenile
                    },
                    error: function(xhr, status, error) {
                        console.log("Paylaşım hatası:");
                        console.log("Status:", status);
                        console.log("Error:", error);
                        console.log("Response:", xhr.responseText);
                        console.log("Status Code:", xhr.status);
                        showMessage("Paylaşım işlemi başarısız: " + error, "danger");
                    }
                });
            });

            // Tüm paylaşımları kaldır
            $("#btnUnshareAll").click(function() {
                if (confirm("Bu dosyanın tüm paylaşımlarını kaldırmak istediğinizden emin misiniz?")) {
                    $.ajax({
                        url: apiBaseUrl + "/FileModal/unshare-all",
                        type: "POST",
                        headers: {
                            "Authorization": "Bearer " + token,
                            "Content-Type": "application/json"
                        },
                        data: JSON.stringify({ fileId: parseInt(currentFileId) }),
                        success: function(response) {
                            showMessage("Tüm paylaşımlar kaldırıldı", "success");
                            $("#shareModal").modal("hide");
                            GetFileList(); // Listeyi yenile
                        },
                        error: function(xhr, status, error) {
                            console.log("Paylaşım kaldırma hatası:", error);
                            showMessage("Paylaşım kaldırma işlemi başarısız: " + error, "danger");
                        }
                    });
                }
            });

            // Çoklu paylaşım kaldırma fonksiyonu
            function unshareFile(userIds) {
                $.ajax({
                    url: apiBaseUrl + "/FileModal/unshare",
                    type: "POST",
                    headers: {
                        "Authorization": "Bearer " + token,
                        "Content-Type": "application/json"
                    },
                    data: JSON.stringify({
                        fileId: parseInt(currentFileId),
                        userIds: userIds
                    }),
                    success: function(response) {
                        showMessage("Paylaşım kaldırıldı", "success");
                        getCurrentShares(currentFileId); // Mevcut paylaşımları yenile
                    },
                    error: function(xhr, status, error) {
                        console.log("Paylaşım kaldırma hatası:", error);
                        showMessage("Paylaşım kaldırma işlemi başarısız: " + error, "danger");
                    }
                });
            }

            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                var k = 1024;
                var sizes = ['Bytes', 'KB', 'MB', 'GB'];
                var i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }

            function FormatDate(dateString) {
                if (!dateString) return '';
                try {
                    var date = new Date(dateString);
                    var day = ("0" + date.getDate()).slice(-2);
                    var month = ("0" + (date.getMonth() + 1)).slice(-2);
                    var year = date.getFullYear();
                    var hours = ("0" + date.getHours()).slice(-2);
                    var minutes = ("0" + date.getMinutes()).slice(-2);

                    return day + "." + month + "." + year + " " + hours + ":" + minutes;
                } catch(e) {
                    return dateString;
                }
            }

            // Dosya yükleme işlemi
            $("#btnSave").click(function(){
                console.log("Dosya yükleme başlatıldı");

                var file = $("#fileInput")[0].files[0];
                var categoryId = $("#ddlCategory").val();
                var description = $("#txtDescription").val();

                if(!file){
                    showMessage("Lütfen bir dosya seçiniz!", "danger");
                    return false;
                }

                if(categoryId=="" || categoryId==null){
                    showMessage("Lütfen bir kategori seçiniz!", "danger");
                    return false;
                }

                var formData = new FormData();
                formData.append("file", file);
                formData.append("categoryId", categoryId);
                formData.append("description", description);

                $.ajax({
                    url: apiBaseUrl + "/FileModal",
                    type: "POST",
                    headers: {
                        "Authorization": "Bearer " + token
                    },
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (d) {
                        showMessage("Dosya başarıyla yüklendi", "success");
                        GetFileList();
                        clearForm();
                    },
                    error: function (xhr, status, error) {
                        if (xhr.status === 201) {
                            showMessage("Dosya başarıyla yüklendi", "success");
                            GetFileList();
                            clearForm();
                        } else {
                            showMessage("Dosya yüklenemedi! (Kod: " + xhr.status + ")", "danger");
                        }
                    }
                });
            });

            // Düzenleme işlemi
            $(document).on("click",".btnEdit",function(){
                var id=$(this).attr("data-id");

                $.ajax({
                    url: apiBaseUrl + "/FileModal/"+id,
                    type: "GET",
                    headers: {
                        "Authorization": "Bearer " + token
                    },
                    contentType: "application/json",
                    success: function (d) {
                        $("#btnSave").hide();
                        $("#btnCancel").show();
                        $("#btnEdit").show();
                        $("#btnDelete").show();
                        $("#txtId").val(id);
                        $("#ddlCategory").val(d.categoryId);
                        $("#txtDescription").val(d.description);
                        $("#fileInput").prop("disabled", true);

                        // Scroll to form
                        $('html, body').animate({
                            scrollTop: $("#fileUploadForm").offset().top
                        }, 500);
                    },
                    error: function (d) {
                        console.log("Dosya bilgileri alınamadı:", d);
                    }
                });
            });

            // Dosya indirme işlemi
            $(document).on("click",".btnDownload",function(){
                var id=$(this).attr("data-id");

                $.ajax({
                    url: apiBaseUrl + "/FileModal/download/" + id,
                    type: "GET",
                    headers: {
                        "Authorization": "Bearer " + token
                    },
                    xhrFields: {
                        responseType: 'blob'
                    },
                    success: function(data, status, xhr) {
                        var filename = "";
                        var disposition = xhr.getResponseHeader('Content-Disposition');
                        if (disposition && disposition.indexOf('attachment') !== -1) {
                            var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                            var matches = filenameRegex.exec(disposition);
                            if (matches != null && matches[1]) filename = matches[1].replace(/['"]/g, '');
                        }

                        var blob = new Blob([data]);
                        var link = document.createElement('a');
                        link.href = window.URL.createObjectURL(blob);
                        link.download = filename || 'download';
                        link.click();
                        window.URL.revokeObjectURL(link.href);
                    },
                    error: function(xhr) {
                        showMessage("Dosya indirilemedi: " + (xhr.status === 403 ? "Yetki hatası" : "Bilinmeyen hata"), "danger");
                    }
                });
            });

            // YENİ: StarredController kullanarak yıldızlama işlemi
            $(document).on("click",".btnStar",function(){
                var fileId = $(this).attr("data-id");
                var button = $(this);
                var userId = getUserId();

                if (!userId) {
                    showMessage("Kullanıcı ID'si alınamadı", "danger");
                    return;
                }

                // Önce dosya bilgilerini al
                $.ajax({
                    url: apiBaseUrl + "/FileModal/" + fileId,
                    type: "GET",
                    headers: {
                        "Authorization": "Bearer " + token
                    },
                    success: function(fileData) {
                        var fileName = "";
                        if (fileData.fileName) {
                            fileName = fileData.fileName.toString().trim();
                            if (fileData.extension) {
                                fileName += fileData.extension.toString().trim();
                            }
                        } else {
                            var tableRow = button.closest('tr');
                            var fileNameFromTable = tableRow.find('td:first').text().trim();
                            fileName = fileNameFromTable.replace(/^\s*\S+\s*/, '').trim();
                        }

                        if (!fileName || fileName === "") {
                            fileName = "file_" + fileId + ".unknown";
                        }

                        var username = fileData.uploadedBy ? fileData.uploadedBy.toString().trim() : "Anonymous";
                        if (!username || username === "") {
                            username = "Anonymous";
                        }

                        var starData = {
                            id: 0,
                            fileId: parseInt(fileId),
                            fileName: fileName,
                            userId: userId.toString(),
                            username: username,
                            starredOn: new Date().toISOString()
                        };

                        $.ajax({
                            url: apiBaseUrl + "/Starred/star",
                            type: "POST",
                            headers: {
                                "Authorization": "Bearer " + token,
                                "Content-Type": "application/json"
                            },
                            data: JSON.stringify(starData),
                            success: function (d) {
                                button.removeClass("btn-outline-warning").addClass("btn-warning");
                                button.attr("title", "Favorilere Eklendi");
                                showMessage("Dosya favorilere eklendi", "success");
                            },
                            error: function (xhr, status, error) {
                                if (xhr.status === 400) {
                                    showMessage("Bu dosya zaten favorilerinizde", "info");
                                    button.removeClass("btn-outline-warning").addClass("btn-warning");
                                    button.attr("title", "Favorilerinizde");
                                } else {
                                    showMessage("Favorilere eklenemedi: " + error, "danger");
                                }
                            }
                        });
                    },
                    error: function(xhr, status, error) {
                        showMessage("Dosya bilgileri alınamadı", "danger");
                    }
                });
            });

            // Dosya silme işlemi
            $(document).on("click",".btnDeleteFile",function(){
                if(!confirm("Bu dosyayı silmek istediğinizden emin misiniz?")){
                    return;
                }

                var id=$(this).attr("data-id");

                $.ajax({
                    url: apiBaseUrl + "/FileModal/"+id,
                    type: "DELETE",
                    headers: {
                        "Authorization": "Bearer " + token
                    },
                    contentType: "application/json",
                    success: function (d) {
                        showMessage("Dosya başarıyla silindi", "success");
                        GetFileList();
                    },
                    error: function (xhr, status, error) {
                        if (xhr.status === 204) {
                            showMessage("Dosya başarıyla silindi", "success");
                            GetFileList();
                        } else {
                            showMessage("Dosya silinemedi! (Kod: " + xhr.status + ")", "danger");
                        }
                    }
                });
            });

            // Vazgeç butonu
            $("#btnCancel").click(function(){
                clearForm();
                $("#btnCancel").hide();
                $("#btnEdit").hide();
                $("#btnDelete").hide();
                $("#btnSave").show();
            });

            // Güncelleme butonu
            $("#btnEdit").click(function(){
                var id=$("#txtId").val();
                var categoryId=$("#ddlCategory").val();
                var description=$("#txtDescription").val();

                if(categoryId=="" || categoryId==null){
                    showMessage("Lütfen bir kategori seçiniz!", "danger");
                    return false;
                }

                var formData = new FormData();
                formData.append("categoryId", categoryId);
                formData.append("description", description);

                $.ajax({
                    url: apiBaseUrl + "/FileModal/" + id,
                    type: "PUT",
                    headers: {
                        "Authorization": "Bearer " + token
                    },
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (d) {
                        showMessage("Dosya başarıyla güncellendi", "success");
                        GetFileList();
                        $("#btnCancel").click();
                    },
                    error: function (xhr, status, error) {
                        if (xhr.status === 204) {
                            showMessage("Dosya başarıyla güncellendi", "success");
                            GetFileList();
                            $("#btnCancel").click();
                        } else {
                            showMessage("Dosya güncellenemedi! (Kod: " + xhr.status + ")", "danger");
                        }
                    }
                });
            });

            // Form silme butonu
            $("#btnDelete").click(function(){
                if(!confirm("Bu dosyayı silmek istediğinizden emin misiniz?")){
                    return;
                }

                var id=$("#txtId").val();

                $.ajax({
                    url: apiBaseUrl + "/FileModal/"+id,
                    type: "DELETE",
                    headers: {
                        "Authorization": "Bearer " + token
                    },
                    contentType: "application/json",
                    success: function (d) {
                        showMessage("Dosya başarıyla silindi", "success");
                        GetFileList();
                        $("#btnCancel").click();
                    },
                    error: function (xhr, status, error) {
                        if (xhr.status === 204) {
                            showMessage("Dosya başarıyla silindi", "success");
                            GetFileList();
                            $("#btnCancel").click();
                        } else {
                            showMessage("Dosya silinemedi!", "danger");
                        }
                    }
                });
            });

            // Form temizleme fonksiyonu
            function clearForm(){
                $("#fileInput").val("").prop("disabled", false);
                $("#ddlCategory").val("");
                $("#txtDescription").val("");
                $("#txtId").val("");
                $("#divResult").hide().html("");
            }

            // Mesaj gösterme fonksiyonu
            function showMessage(message, type) {
                $("#divResult")
                    .show()
                    .removeClass()
                    .addClass("alert alert-" + type + " mt-3")
                    .html(message)
                    .delay(2000)
                    .fadeOut(3000);
            }
        });
    </script>
}